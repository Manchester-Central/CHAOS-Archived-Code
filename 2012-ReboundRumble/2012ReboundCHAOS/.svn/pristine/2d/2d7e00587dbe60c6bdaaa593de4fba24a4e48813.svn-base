/*
**-----------------------------------------------**
**                                                             
**   Filename: Main.h                                        
**                                                             
**   About:    The Main ReboundRumble Robot Class
**                                                             
**   Property of Chaos, Copyright 2011
**   Written by: Josh Allard
**               Ben Papp
**               Zain Abbas           
**               Eric Moy, Chaos.                                                                            
**   2012 1 12             
**                                                             
**-------------------------------------------------------------*/


#ifndef MAIN_H_
#define MAIN_H_



#include "WPILib.h"
#include "Refs.h"
#include "Gamepad.h"
#include "Accelerometer.h"
#include "Manipulator.h"


class Main : public IterativeRobot
{
public:
	
	//Function Prototypes
	Main(void);
	
	virtual void TeleopContinuous(void);
	virtual void AutonomousContinuous(void);
	virtual void DisabledContinuous(void);
	
	virtual void TeleopPeriodic(void);
	virtual void AutonomousPeriodic(void);	
	virtual void DisabledPeriodic(void);
	
	virtual void RobotInit(void);
	virtual void DisabledInit(void);
	virtual void AutonomousInit(void);
	virtual void TeleopInit(void);
	

	RobotDrive *VEXBase;
	Victor *VEXArm;
	Victor *VEXMotor;
	Victor *VEXConveyor;
	int AngleCorrection;
	float LastAngle;
	float CorrectionalValue;
	double GyroLoopCount;
	Timer *VEXTimer;
	bool InitiationBool;
	
	Gyro *VEXGyro; 
	Accelerometer *VEXAccel;
	float GyroAngle;
	float VEXDriveProportion;
	float GyroHold;
	float AccelValue;
	AnalogChannel *AnaChan;
	float AccelVoltage;
	float AccelAngle;
	float PreviousGyroAngle;
	float DeltaAngle;
	float ProjectedAngle;
	//Gamepads
	Gamepad *DriverGamepad;
	Gamepad *OperatorGamepad;
	
	RobotDrive *Base;
	Encoder *LeftDriveEncoder;
	Encoder *RightDriveEncoder;
	
	double EncoderAverageDistance;
	float WantedSpeedTop;
	float WantedSpeedBottom;
	double ActualSpeedTop;
	double ActualSpeedBottom;
	
	// sensor testing
	DigitalInput *LimitSwitch;
	DigitalInput *LightSensor;
	AnalogChannel *DistanceSensor;
	bool PreviousLightBool;
	float BallValue;
	float PreviousDistanceFloat;
	float TestVariable;
	
	//Manipulator
	Manipulator *ScoringMechanism;
	
	//BridgeToggle
	Victor *BridgeToggleMotor;
	DigitalInput *BridgeToggleUpSwitch;
	DigitalInput *BridgeToggleDownSwitch;
	
	//Autonomous
	typedef enum 
	{
		AUTO_STATE_DISABLED = 0,
		AUTO_STATE_MOVE_FORWARD = 1,
		AUTO_STATE_SHOOT = 2,
		AUTO_STATE_BRIDGE = 3
	}AUTO_STATES_T;
	
	AUTO_STATES_T AutoNextState;
	AUTO_STATES_T AutoCurrentState;
	
	bool DriveStraight(float FinalDistance);
	
};

#endif
