/*-------------------------------------------------------------**
 **                                                             
 **   Filename: Main.cpp                                        
 **                                                             
 **   About:    The Main ReboundRumble Robot Class
 **                                                             
 **   Property of Chaos, Copyright 2012
 **   Written by:  
 **               Josh Allard
 **               Eric Moy
 **               Ben Papp
 **               Zain Abbas
 **				  CHAOS.           
 **                                                                                           
 **   2012 1 12             
 **                                                             
 **-------------------------------------------------------------*/

#include "Main.h"

Main::Main(void)
	: mBuffer( 5, 0.0 )
{
	//RobotDrive
	//Base = new RobotDrive(FRONT_LEFT_DRIVE_PORT, REAR_LEFT_DRIVE_PORT, FRONT_RIGHT_DRIVE_PORT, REAR_RIGHT_DRIVE_PORT);
	Base = new RobotDrive(LEFT_DRIVE_PORT, RIGHT_DRIVE_PORT);
	Base->SetSafetyEnabled(false);

	//Base = new RobotDrive(FRONT_LEFT_DRIVE_PORT, FRONT_RIGHT_DRIVE_PORT);
	//Base = new RobotDrive(FRONT_LEFT_TRANSMISSION_MOTOR_CHANNEL, REAR_LEFT_TRANSMISSION_MOTOR_CHANNEL, FRONT_RIGHT_TRANSMISSION_MOTOR_CHANNEL, REAR_RIGHT_TRANSMISSION_MOTOR_CHANNEL);                               
	//
	
	LeftDriveEncoder = new Encoder(DIGITAL_MODULE, LEFT_ENCODER_PORT_1,DIGITAL_MODULE, LEFT_ENCODER_PORT_2, false);
	LeftDriveEncoder->SetDistancePerPulse(DRIVE_ENCODER_DISTANCE);
	RightDriveEncoder = new Encoder(DIGITAL_MODULE, RIGHT_ENCODER_PORT_1, DIGITAL_MODULE, RIGHT_ENCODER_PORT_2, false);
	RightDriveEncoder->SetDistancePerPulse(DRIVE_ENCODER_DISTANCE);

	//Gamepads
	DriverGamepad = new Gamepad(DRIVER_GAMEPAD_PORT);
	OperatorGamepad = new Gamepad(OPERATOR_GAMEPAD_PORT);

	//AnaChan = new AnalogChannel(ANALOG_MODULE, 2);

	VEXGyro = new Gyro(ANALOG_MODULE, GYRO_CHANNEL);
	VEXGyro->Reset();
	VEXAccel = new Accelerometer(ANALOG_MODULE, ACCEL_CHANNEL);
	DrivingGyro = new Gyro(ANALOG_MODULE, DRIVING_GYRO_CHANNEL);
	DrivingGyro->Reset();

	//Shooter

	//BridgeToggle
	BridgeToggleUpSwitch = new DigitalInput(DIGITAL_MODULE, TOGGLE_UP_SWITCH_PORT);
	BridgeToggleDownSwitch = new DigitalInput(DIGITAL_MODULE, TOGGLE_DOWN_SWITCH_PORT);
	BridgeToggleMotor = new Victor(DIGITAL_MODULE, BRIDGE_TOGGLE_MOTOR_PORT);
	
	AngleCorrection = 0;
	GyroLoopCount = 0;
	VEXTimer = new Timer;
	
	
	ScoringMechanism = new Manipulator(OperatorGamepad);

	//Light Alignment
	FrontLightSensor = new DigitalInput(DIGITAL_MODULE, FRONT_LIGHT_SENSOR_PORT);
	LEDSignal = new Relay(DIGITAL_MODULE, LED_SIGNAL_RELAY_PORT);
	LEDSignal2 = new Relay(DIGITAL_MODULE, LED_SIGNAL_RELAY_TWO_PORT);
	AlignTimer = new Timer();
	
	InitiationBool = 0;
	
	AutoNextState = AUTO_STATE_MOVE_FORWARD;


	//Setup Watchdog
	GetWatchdog().SetExpiration(10.0);
	
}

void Main::TeleopContinuous(void)
{
	//Feed Watchdog
	GetWatchdog().Feed();
	//test

	//Main while loop of the Telop code
	while(IsOperatorControl() && !IsDisabled()) 
	{

		//Feed the watchdog every iteration of this while loop
		GetWatchdog().Feed();

		if(!InitiationBool)
		{

			VEXTimer->Start();
			PreviousGyroAngle = VEXGyro->GetAngle();
			

			InitiationBool = 1;
			
			ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_INIT);
		}
		
		CalculatedDistance = (DistanceSensor->GetAverageVoltage() * 102.4);
		mBuffer.push_back( CalculatedDistance );
		
		float filteredDistance = 0.0;
		// foreach 'old' sample, from oldest to newest (in time)
		for( boost::circular_buffer< float >::iterator iter = mBuffer.begin(); 
			 iter != mBuffer.end();
			 iter++ )
		{
			filteredDistance += *iter;
		}
		filteredDistance = filteredDistance / mBuffer.size();
		
		//printf("MaxBotix, %f, AverageBits, %i,", filteredDistance);
		AccelValue = VEXAccel->GetAcceleration();
		GyroAngle = VEXGyro->GetAngle();
		PreviousDistanceFloat = DistanceSensor->GetVoltage();
		
		
		if(BridgeToggleUpSwitch->Get() == true)
		{
			printf("Limit Switch [[UP]]: True");
		}
		if(BridgeToggleDownSwitch->Get() == true)
		{
			printf("Limit Switch [[DOWN]]: True");
		}
		
		// && BridgeToggleUpSwitch->Get() == false
		// && BridgeToggleDownSwitch->Get() == false
		if(DriverGamepad->GetNumberedButton(TOGGLE_UP_BUTTON) == true)
		{
			BridgeToggleMotor->Set(TOGGLE_SPEED_UP);
			printf("Toggle Up!?");
		}
		else if(DriverGamepad->GetNumberedButton(TOGGLE_DOWN_BUTTON) == true)
		{
			BridgeToggleMotor->Set(TOGGLE_SPEED_DOWN);
			printf("Toggle Down?!");
		}
		else
		{
			BridgeToggleMotor->Set(0.0);
		}
		
		//LED signal
		if(FrontLightSensor->Get() == true)
		{
			LEDSignal->Set(Relay::kForward);
			LEDSignal2->Set(Relay::kForward);
		}
		else
		{
			LEDSignal->Set(Relay::kOff);
			LEDSignal2->Set(Relay::kOff);
		} 
		
		
		GetWatchdog().Feed();
		//Bridge Balance
		if(GyroAngle > MAX_BALANCING_ANGLE)
		{
			GyroAngle = MAX_BALANCING_ANGLE;
		}
		else if(GyroAngle < (-1 * MAX_BALANCING_ANGLE))
		{
			GyroAngle = (-1 * MAX_BALANCING_ANGLE);
		}
		
		if(DriverGamepad->GetNumberedButton(BUTTON_BALANCE))
		{
			VEXDriveProportion = ((GyroAngle / MAX_BALANCING_ANGLE) * .50);
			//VEXDriveProportion = (VEXDriveProportion * VEXDriveProportion * VEXDriveProportion);

			if(VEXDriveProportion  > .50)
			{
				VEXDriveProportion = .50;
			}
			else if(VEXDriveProportion < (-.50))
			{
				VEXDriveProportion = (-.50);
			}

			if(VEXTimer->Get() < 0.2)
			{

				if(ProjectedAngle < 10 && ProjectedAngle > -10)
				{
					Base->TankDrive(-VEXDriveProportion, -VEXDriveProportion);
				}
				else if(ProjectedAngle > 10)
				{
					Base->TankDrive(-.50, -.50);
				}
				else if(ProjectedAngle < -10)
				{
					Base->TankDrive(0.50, 0.50);
				}
			}
			else if(VEXTimer->Get() > 0.4)
			{
				VEXTimer->Stop();
				VEXTimer->Reset();
				InitiationBool = 0;
			}
			else
			{
				Base->TankDrive(0.0, 0.0);
			}
		}//Light Sensor Align Function
		else if(DriverGamepad->GetNumberedButton(BUTTON_SWEEP_LEFT) && FrontLightSensor->Get() == false)
		{
			Base->TankDrive(-0.5, 0.5);
		}
		else if(DriverGamepad->GetNumberedButton(BUTTON_SWEEP_RIGHT) && FrontLightSensor->Get() == false)
		{
			Base->TankDrive(0.5, -0.5);
		}
		else
		{
			if(DriverGamepad->GetRightY() < 0.1 && DriverGamepad->GetRightY() > -0.1)
			{
				Base->TankDrive(DriverGamepad->GetLeftY(), 0.0);
			}
			else if(DriverGamepad->GetLeftY() < 0.1 && DriverGamepad->GetLeftY() > -0.1)
			{
				Base->TankDrive(0.0, DriverGamepad->GetRightY());
			}
			else
			{
				Base->TankDrive(DriverGamepad->GetLeftY(), DriverGamepad->GetRightY());
			}
		}

		if(DriverGamepad->GetNumberedButton(BUTTON_GYRO_RESET))
		{
			VEXGyro->Reset();
			GyroLoopCount = 0;
		}
		GyroLoopCount = (GyroLoopCount + 1);

		ScoringMechanism->StateMachine();
		GetWatchdog().Feed();

	} //End of while

} //End of Teleop

void Main::AutonomousContinuous(void)
{
	GetWatchdog().Feed();

	while(IsAutonomous() && !IsDisabled())
	{
		GetWatchdog().Feed();
		
		
//		switch(AutoNextState)
//		{
//			case AUTO_STATE_MOVE_FORWARD:
//				if(AutoCurrentState != AutoNextState)
//				{
//					ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_RELOAD);
//				}
//				AutoCurrentState = AUTO_STATE_MOVE_FORWARD;
//
//				printf("AUTO_STATE_MOVE_FORWARD");
//				
//				if(DriveStraight(WANTED_ENCODER_DISTANCE_1))
//				{
//					AutoNextState = AUTO_STATE_SHOOT;
//				}
//				break;
//				
//			case AUTO_STATE_SHOOT:
//				if(AutoCurrentState != AutoNextState)
//				{
//					ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_AUTO_SHOOT);
//				}
//				AutoCurrentState = AUTO_STATE_SHOOT;
//				if(ScoringMechanism->CheckState() == Manipulator::MANIP_STATE_DISABLED)
//				{
//					AutoNextState = AUTO_STATE_BACK_UP;
//				}
//				printf("AUTO_STATE_SHOOT");
//				break;
//			
//			case AUTO_STATE_BACK_UP:
//				if(AutoCurrentState != AutoNextState)
//				{
//					ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_DISABLED);
//				}
//				AutoCurrentState = AUTO_STATE_BACK_UP;
//				if(EncoderAverageDistance > WANTED_ENCODER_DISTANCE_2)
//				{
//					Base->TankDrive(-1.0,-1.0);
//				}
//				else
//				{
//					AutoNextState = AUTO_STATE_TURN;
//				}
//				break;
//			
//			case AUTO_STATE_TURN:
//				if(AutoCurrentState != AutoNextState)
//				{
//					ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_DISABLED);
//
//				}
//				AutoCurrentState = AUTO_STATE_TURN;
//				if(TurnAngle < WANTED_TURN_ANGLE)
//				{
//					Base->TankDrive(0.25,-0.25);
//				}
//				else if(TurnAngle > WANTED_TURN_ANGLE)
//				{
//					Base->TankDrive(0.0,0.0);
//					AutoNextState = AUTO_STATE_BRIDGE;
//				}
//				break;
//				
//			case AUTO_STATE_BRIDGE:
//				if(EncoderAverageDistance < WANTED_ENCODER_DISTANCE_3)
//				{
//					Base->TankDrive(0.75,0.75);
//				}
//				else if(EncoderAverageDistance > WANTED_ENCODER_DISTANCE_3)
//				{
//					Base->TankDrive(0.0,0.0);
//				
//					if(BridgeToggleDownSwitch->Get() == true && PreviousBridgeToggleDownSwitch == true)
//					{
//						BridgeToggleMotor->Set(0.2);
//					}
//					else if(BridgeToggleDownSwitch->Get() == true && PreviousBridgeToggleDownSwitch == false)
//					{
//						BridgeToggleMotor->Set(0.0);
//					}
//				}	
//				PreviousBridgeToggleDownSwitch = BridgeToggleDownSwitch->Get();
//				AutoNextState = AutoCurrentState;
//				//printf("AUTO_STATE_BRIDGE");
//				//EncoderAverageDistance = ((LeftDriveEncoder->GetDistance() + RightDriveEncoder->GetDistance()) / 2);
//				EncoderAverageDistance = LeftDriveEncoder->GetDistance();
//				//EncoderAverageDistance = RightDriveEncoder->GetDistance();
//								
//				break;
//
//			case AUTO_STATE_DISABLED:
//				printf("AUTO_STATE_DISABLED");
//				break;
//		}
		

	}

}

void Main::DisabledContinuous(void)
{
	printf("You are in Main::DisabledContinuous\n");
	ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_DISABLED);
	
	/*
	if(LastAngle != VEXGyro->GetAngle())
	{
		CorrectionalValue = ((LastAngle - VEXGyro->GetAngle())/AngleCorrection);
		AngleCorrection = 0;
	}
	else
	{
		AngleCorrection++;
	}
	LastAngle = VEXGyro->GetAngle();
	printf("CorrectionalValue: %f", CorrectionalValue);
	 */
}

void Main::TeleopPeriodic(void)
{

}
void Main::AutonomousPeriodic(void)
{

}
void Main::DisabledPeriodic(void)
{

}
void Main::RobotInit(void)
{
	//When robot is turned on, enable the compressor

	ScoringMechanism->StateMachine();
	ScoringMechanism->ChangeNextState(Manipulator::MANIP_STATE_DISABLED);
	LeftDriveEncoder->Start();
	RightDriveEncoder->Start();

}
void Main::DisabledInit(void)
{
	//This code will run once every time the robot is brought back into Disabled
	printf("You are in Main::DisabledInit\n");
}

void Main::AutonomousInit(void)
{
	printf("You are in Main::AutoInit\n");
}

void Main::TeleopInit(void)
{

	InitiationBool = 0;
	GyroLoopCount = 0;
	printf("You are in Main::TeleopInit\n");
}

bool Main::DriveStraight(float FinalDistance)
{
	//EncoderAverageDistance = ((LeftDriveEncoder->GetDistance() + RightDriveEncoder->GetDistance()) / 2);
	//EncoderAverageDistance = LeftDriveEncoder->GetDistance();
	Timer *DrivingTimer;
	float DistanceRight = 0;
	float DistanceLeft = 0;
	float DistanceTraveled = 0;
	float DrivePower = 0.75;
	float LeftOffsetValue = 0;
	float RightOffsetValue = 0;
	DrivingTimer->Start();
	while(DistanceTraveled < FinalDistance || DrivingTimer->Get() > 15)
	{
		DistanceLeft = LeftDriveEncoder->GetDistance();
		DistanceRight = RightDriveEncoder-> GetDistance();
		DistanceTraveled = ((DistanceRight +DistanceLeft) / 2);
		LeftOffsetValue = ((DistanceTraveled - DistanceLeft) / DistanceTraveled);
		RightOffsetValue = ((DistanceTraveled - DistanceRight) / DistanceTraveled);
		Base->TankDrive((DrivePower + LeftOffsetValue), (DrivePower + RightOffsetValue));
		
		if((DistanceTraveled / FinalDistance) > 0.50  && (DistanceTraveled / FinalDistance) < 0.75)
		{
			DrivePower = 0.50;
		}
		else if((DistanceTraveled / FinalDistance) > 0.75)
		{
			DrivePower = 0.30;
		}
		GetWatchdog().Feed();
	}
	DrivingTimer->Stop();
	Base->TankDrive(0.0,0.0);
	return true;
}

START_ROBOT_CLASS(Main);
