#include "WPILib.h"
#include "Drive.h"
#include "Gamepad.h"
//#include "Shooter.h"
#include "Intake.h"

/**
 * This is a demo program showing the use of the RobotBase class.
 * The IterativeRobot class is the base of a robot application that will automatically call your
 * Periodic methods for each packet based on the mode.
 */ 
class RobotDemo : public IterativeRobot
{
	//RobotDrive myRobot; // robot drive system
	Drive *drive;

	//Shooter *shooter;
	
	Intake *intake;
	Gamepad *driverPad;
	Gamepad *operatorPad;
	
public:
	RobotDemo()
		//myRobot(1, 2),	// these must be initialized in the same order
		//stick(1)		// as they are declared above.
	{
		//myRobot.SetExpiration(0.1);
		this->SetPeriod(0); 	//Set update period to sync with robot control packets (20ms nominal)
		this->drive = new Drive();
		this->driverPad = new Gamepad(1);
		this->operatorPad = new Gamepad(2);	
		//this->shooter = new Shooter();
		
	}
	
/**
 * Robot-wide initialization code should go here.
 * 
 * Use this method for default Robot-wide initialization which will
 * be called when the robot is first powered on.  It will be called exactly 1 time.
 */
void RobotDemo::RobotInit() {
}

/**
 * Initialization code for disabled mode should go here.
 * 
 * Use this method for initialization code which will be called each time
 * the robot enters disabled mode. 
 */
void RobotDemo::DisabledInit() {
}

/**
 * Periodic code for disabled mode should go here.
 * 
 * Use this method for code which will be called periodically at a regular
 * rate while the robot is in disabled mode.
 */
void RobotDemo::DisabledPeriodic() {
}

/**
 * Initialization code for autonomous mode should go here.
 * 
 * Use this method for initialization code which will be called each time
 * the robot enters autonomous mode.
 */
void RobotDemo::AutonomousInit() {
	drive->InitAutoDrive(12.0, 12.0, 0.5);
	//sleep(1);
	//drive->TeleopDrive(-0.5,-0.5);

	
}

/**
 * Periodic code for autonomous mode should go here.
 *
 * Use this method for code which will be called periodically at a regular
 * rate while the robot is in autonomous mode.
 */
void RobotDemo::AutonomousPeriodic() {
	drive->AutoDrive();
	
}

/**
 * Initialization code for teleop mode should go here.
 * 
 * Use this method for initialization code which will be called each time
 * the robot enters teleop mode.
 */
void RobotDemo::TeleopInit() {
}

/**
 * Periodic code for teleop mode should go here.
 *
 * Use this method for code which will be called periodically at a regular
 * rate while the robot is in teleop mode.
 */
void RobotDemo::TeleopPeriodic() {
	//myRobot.ArcadeDrive(stick); // drive with arcade style
	drive->TeleopDrive(driverPad->GetLeftY() *DRIVER_LEFT_DIRECTION, driverPad->GetRightY() *DRIVER_RIGHT_DIRECTION);
	
	/*
	shooter->shoot();
	if(operatorPad->GetNumberedButton(RIGHT_TRIGGER_BUTTON))
	{
		shooter->initShot(90, 0.7);
	}
	*/
		
		
		//printf("right Joystick distance: %f  left Joystick distance: %f \n", driverPad->GetRightY(), driverPad->GetLeftY());
}

/**
 * Initialization code for test mode should go here.
 * 
 * Use this method for initialization code which will be called each time
 * the robot enters test mode.
 */
void RobotDemo::TestInit() {
}

/**
 * Periodic code for test mode should go here.
 *
 * Use this method for code which will be called periodically at a regular
 * rate while the robot is in test mode.
 */
void RobotDemo::TestPeriodic() {
}

};

START_ROBOT_CLASS(RobotDemo);

