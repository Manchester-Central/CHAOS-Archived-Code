 /*-------------------------------------------------------------**
 **                                                             
 **   Filename: Shooter.h                                      
 **                    
 **   2014 1 13             
 **-------------------------------------------------------------*/

#ifndef SHOOTER_H_
#define SHOOTER_H_

#include "HardwareIO.h"
#include "WPILib.h"
#include "Constants.h"
#include <math.h>
#include "Intake.h"

//Shooter talons
#define SHOOTER_TALON_PORT_A 7
#define SHOOTER_TALON_PORT_B 8
//#define SHOOTER_TALON_PORT_C 9
#define SHOOTER_DIRECTION -1.0 //positive = shoot, negative = retract

//Shooter Encoders
#define SHOOTER_ENCODER_CHANNEL_A 5
#define SHOOTER_ENCODER_CHANNEL_B 6
#define SHOOTER_ENCODER_DIRECTION false
#define SHOOTER_DEGREES_PER_COUNT 1.2 //(revolution/100counts)*(1/3) to degrees/counts

#define RETRACTED_ANGLE 1.0

//Digital Light Sensors
#define SHOOTER_DOWN_SENSOR_PORT 7
#define SHOOTER_UP_SENSOR_PORT 8

//#define SHOOTER_RESET_SPEED -0.3
#define SHOOTER_RESET_SPEED -0.2
//angle/speed matrix

#define SHOT_HIGH_ANGLE 45.0
#define SHOT_HIGH_SPEED 0.2

#define SHOT_LOW_ANGLE 45.0
#define SHOT_LOW_SPEED 0.2

#define SHOT_TRUSS_ANGLE 45.0
#define SHOT_TRUSS_SPEED 0.2

#define SHOT_PASS_ANGLE 45.0
#define SHOT_PASS_SPEED 0.2

#define SHOT_TEST_ANGLE 45.0
#define SHOT_TEST_SPEED 0.3

#define INTAKE_SAFE_POSITION_FOR_SHOT 10.0 //inches extended

class Shooter
{
public:
	Shooter(void);
	//Function prototypes
	void initShot(double shotAngle, double speed);
	void handle(void);
	bool isReset(void);
	
	void setShooterPower(double power);
	
	void debug(void);
	
	void setIntake(Intake* intake);
	
private:
	Intake *intake;
	
	Talon *shooterTalonA;
	Talon *shooterTalonB;
	
	DigitalInput *shooterDownSensor;
	DigitalInput *shooterUpSensor;
	
	Encoder *shooterEncoder;
	
	
	float power;
	float angle; 
	bool shootEnable;
	bool calibrated;
};

#endif 

