 /*-------------------------------------------------------------**
 **                                                             
 **   Filename: Constants.h                                               
 **                                                                                           
 **   2014 2 08             
 **                                                             
 **-------------------------------------------------------------*/

#include "Shooter.h"

Shooter::Shooter(void)
{
	//Talons
	shooterTalonA = new Talon(SHOOTER_TALON_PORT_A);
	shooterTalonB = new Talon(SHOOTER_TALON_PORT_B);
	shooterTalonC = new Talon(SHOOTER_TALON_PORT_C);

	
	shooterEncoder = new Encoder(SHOOTER_ENCODER_CHANNEL_A, SHOOTER_ENCODER_CHANNEL_B, 
			SHOOTER_ENCODER_DIRECTION, Encoder::k4X);
	shooterEncoder->SetDistancePerPulse(SHOOTER_DEGREES_PER_COUNT);
	shootEnable = false;
	
	shooterResetSensor = new DigitalInput(SHOOTER_LIGHT_SENSOR_PORT);
	
	calibrated = false;
}

void Shooter::setShooterPower(double power)
{
	shooterTalonA->SetSpeed(power * SHOOTER_DIRECTION);
	shooterTalonB->SetSpeed(power * SHOOTER_DIRECTION);
	shooterTalonC->SetSpeed(power * SHOOTER_DIRECTION);
}

// TODO: refactor to shooter

void Shooter::initShot(double shotAngle, double speed)
{
	Shooter::angle = shotAngle;
	Shooter::power = speed;
	

	shootEnable = true;
}

bool Shooter::isReset(void)
{
	bool IsReset = false;
	if(calibrated == true)
	{
		if(shooterResetSensor->Get() || shooterEncoder->GetDistance() <= RETRACTED_ANGLE)
		{
			IsReset = true;
		}
	}
	else 
	{
		if(shooterResetSensor->Get())
		{
			IsReset = true;
		}
	}
	printf("value of reset: %f \n", (double)IsReset);
	return IsReset;
}

void Shooter::shoot()
{
	if(shootEnable==true) //lettin' the shooter go
	{// we are supposed to be shooting
		if(fabs(shooterEncoder->GetDistance()) <= fabs(angle))//are we not there?
		{//lets go there
			Shooter::setShooterPower(power);
			
			printf("shooter encoder angle: %f \n",shooterEncoder->GetDistance());
		}
		else 
		{//we are there
			printf("shooter encoder angle: %f \n",shooterEncoder->GetDistance());
			
			Shooter::setShooterPower(STOP);
			shootEnable = false;
		}
	}
	else
	{//We are not supposed to be shooting
		if(Shooter::isReset()) //is the shooter in the home position?
		{//is in home position
			Shooter::setShooterPower(STOP);
			if(!calibrated)
			{
				shooterEncoder->Reset();
				shooterEncoder->Start();
				calibrated = true;
				printf("*shooter calibrated!!*\n");
			}
		}
		else
		{//we are not supposed to be shooting, so GO HOME
			Shooter::setShooterPower(SHOOTER_RESET_SPEED);
			printf("shooter encoder angle: %f \n",shooterEncoder->GetDistance());
		}
	}
}
